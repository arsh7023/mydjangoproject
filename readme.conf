
======Create Project:
django-admin startproject mydjangoproject
python manage.py runserver 5000

======Create an Application:
python manage.py startapp myapp

vim mydjangoproject/settings.py:
INSTALLED_APPS = [
    'myapp',
    ...

=======initiate the database:
python manage.py migrate

===access to admin:
http://127.0.0.1:5000/admin/

===create super user
python manage.py createsuperuser
Username: alireza
pas:123456


=== create hello.html and url
vim mmydjangoproject/urls.py:

from myapp import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.hello, name='hello')
]
http://127.0.0.1:5000/admin/
http://127.0.0.1:5000/hello/

======Myapp-Models
myapp/models.py:

from django.db import models

class Alimodel(models.Model):
    name = models.CharField(max_length=50)

======Myapp-Models-Admin
myapp/admin.py:
from django.contrib import admin

# Register your models here.
from .models import Alimodel

@admin.register(Alimodel)
class AlimodelAdmin(admin.ModelAdmin):
    list_display = ['name']

====After Model changes
python manage.py makemigrations
then:
python manage.py migrate

http://127.0.0.1:5000/admin/myapp/alimodel/

=====show migrations
python manage.py showmigrations

======shell

python manage.py shell

from myapp.models import Alimodel
a= Alimodel(name='ali')
a.save()

pets= Alimodel.objects.all()
pets[0].name

======Postgres
pip install psycopg2
vim settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'djangodbtest',
        'USER': 'metauser',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

=====Django Rest Framework

pip install djangorestframework
INSTALLED_APPS = [
   ....
    'reactapp',
    'rest_framework'
]

http://127.0.0.1:8000/apis/students/4/?format=api
http://127.0.0.1:8000/apis/students/?format=json

================install python3 mac=

Download https://www.python.org/downloads/mac-osx/

vim ~/.zshrc:
alias python='python3'
alias pip='pip3'
PATH="/Library/Frameworks/Python.framework/Versions/3.9/bin:${PATH}"
export PATH

================
virtualenv is a tool to create isolated Python environments.
Since Python 3.3, a subset of it has been integrated into the standard library under the venv module:
 - venv: This tool provides isolated Python environment
The venv module provides support for creating lightweight â€œvirtual environments

virtualenvwrapper - a useful set of scripts for creating and deleting virtual environments
The distutils package provides support for building and installing additional modules into a Python installation
 setuptools is an enhanced alternative to distutils

site-packages : global  directory.

mac home: source /Library/Frameworks/Python.framework/Versions/3.7/bin/virtualenvwrapper.sh

mac:source /Library/Frameworks/Python.framework/Versions/3.7/bin/virtualenvwrapper.sh
ubuntu: source /usr/share/virtualenvwrapper/virtualenvwrapper.sh


pip install  virtualenv
pip install virtualenvwrapper
================

/Library/Frameworks/Python.framework/Versions/3.9/bin

export VIRTUALENVWRAPPER_VIRTUALENV=/Library/Frameworks/Python.framework/Versions/3.9/bin/virtualenv
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
export WORKON_HOME=~/Documents/virtualenvs
source /Library/Frameworks/Python.framework/Versions/3.9/bin/virtualenvwrapper.sh

mkvirtualenv test
workon test
====================ubuntu

create virtualenv:
mkvirtualenv --python=/usr/bin/python3 geonode
 mkvirtualenv --python=`which python3` geonode

nano ~/.bashrc

# Write to the bottom of the file the following lines
export WORKON_HOME=/home/geonode/.virtualenvs
mac: export WORKON_HOME=~/Documents/virtualenvs

source /usr/share/virtualenvwrapper/virtualenvwrapper.sh

simple create: workon geonode

 mkvirtualenv --python=`which python3` geonode
 workon geonode

====================
python3 -m venv ~/.virtualenvs/djangodev ==  Creating Virtual Environments
The path is where the new environment will be saved on your computer.

The final step in setting up your virtual environment is to activate it:

$ source ~/.virtualenvs/djangodev/bin/activate
If the source command is not available, you can try using a dot instead:

$ . ~/.virtualenvs/djangodev/bin/activate
. tt/bin/activate

python -m mod : run library module as a script (terminates option list)


================install django golbally
pip install Django==3.1.2

================django project venv

python -m venv env
source env/bin/activate
pip install "Django~=3.0.0"
or
python -m pip install Django
pip freeze > tt.txt
